<?php

namespace AdvancedLearning\Oauth2Server;

use LogicException;
use SilverStripe\Forms\PasswordField;
use SilverStripe\ORM\FieldType\DBComposite;
use SilverStripe\Security\PasswordEncryptor;
use SilverStripe\Security\Security;

/**
 * Represent a field to store secret value hashed with a one way algorithm.
 */
class DBSecret extends DBComposite
{
    /**
     * @param array
     */
    private static $composite_db = [
        'Hash' => 'Varchar(512)',
        'Salt' => 'Varchar(50)',
        'Algo' => 'Varchar(50)',
    ];

    /**
     * Generate a random secret and store it in this DBSecret. The generated secret should be displayed once and
     * ONLY once.
     * @param mixed $record
     * @return string random secret
     */
    public function generate($record): string
    {
        $secret = base64_encode(random_bytes(32));
        $this->setValue($secret, $record);

        return $secret;
    }

    /**
     * @param string $value Secret we want to store
     * @param mixed $record
     * @param bool $markChanged
     * @return DBSecret
     * @throws \SilverStripe\Security\PasswordEncryptor_NotFoundException
     */
    public function setValue($value, $record = null, $markChanged = true)
    {
        if (is_string($value)) {
            $encryption_details = Security::encrypt_password($value);
            $value = [
                'Hash' => $encryption_details['password'],
                'Salt' => $encryption_details['salt'],
                'Algo' => $encryption_details['algorithm']
            ];
        }

        return parent::setValue($value, $record, $markChanged); // TODO: Change the autogenerated stub
    }

    /**
     * Check if the provided Secret matches the currently saved secret
     * @param string $secret
     * @return bool
     * @throws \SilverStripe\Security\PasswordEncryptor_NotFoundException
     * @throws LogicException
     */
    public function validate(string $secret): bool
    {
        $salt = $this->getField('Salt');
        $algo = $this->getField('Algo');
        $hash = $this->getField('Hash');

        if (empty($salt) || empty($algo) || empty($hash)) {
            throw new LogicException('Can not validate secret because DBSecret has not been initialised');
        }

        $encryptor = PasswordEncryptor::create_for_algorithm($algo);
        return $encryptor->check($hash, $secret, $salt);
    }
}
